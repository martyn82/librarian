<?xml version="1.0" encoding="UTF-8"?>
<project name="librarian" default="test">
    <property file="${project.basedir}/build.properties" />

    <!-- Clean task -->
    <target name="clean">
        <phingcall target="clean:build" />
        <phingcall target="clean:test" />
    </target>

    <!-- Build task -->
    <target name="build" description="Full build" depends="clean, assets:build">
        <delete dir="${project.basedir}/app/cache/prod" quiet="true" />
        <mkdir dir="${project.basedir}/build/app" />
        <copy todir="${project.basedir}/build/app">
            <fileset dir=".">
                <include name="app/**" />
                <include name="composer.*" />
                <include name="src/.htaccess" />
                <include name="src/AppBundle/**" />
                <include name="web/**" />

                <exclude name="app/cache/**" />
                <exclude name="app/logs/**" />
                <exclude name="src/*/Tests/**" />
                <exclude name="web/app_dev.php" />
            </fileset>
        </copy>
        <exec
            command="SYMFONY_ENV=prod composer install -o --no-dev --no-scripts"
            dir="${project.basedir}/build/app"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <!-- Distribute built app, package and create image -->
    <target name="dist" description="Build distribution" depends="build">
        <mkdir dir="${project.basedir}/build/docker" />
        <tar basedir="${project.basedir}"
             destfile="${project.basedir}/build/docker/${phing.project.name}.tar.gz"
             compression="gzip">
            <fileset dir="${project.basedir}/build/app">
                <include name="app/**" />
                <include name="src/**" />
                <include name="web/**" />
                <include name="vendor/**" />

                <exclude name="app/cache/**" />
                <exclude name="app/logs/**" />
            </fileset>
        </tar>

        <copy todir="${project.basedir}/build/docker">
            <fileset dir="docker">
                <include name="**" />
            </fileset>
        </copy>

        <exec
            command="docker build -t ${phing.project.name} ."
            dir="${project.basedir}/build/docker"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <!-- Clean subtasks -->
    <target name="clean:build">
        <delete dir="${project.basedir}/build" quiet="true" />
        <mkdir dir="${project.basedir}/build" />
    </target>

    <target name="clean:test">
        <delete dir="${project.basedir}/report/test" quiet="true" />
        <mkdir dir="${project.basedir}/report/test" />
    </target>

    <!-- Assets tasks -->
    <target name="assets:build" depends="assets:clean">
        <exec
            command="${project.basedir}/node_modules/.bin/grunt"
            checkreturn="true"
            passthru="true"
        >
            <arg value="build" />
        </exec>
    </target>

    <target name="assets:clean">
        <delete dir="${project.basedir}/web/bundles/app/css" quiet="true" />
        <delete dir="${project.basedir}/web/bundles/app/images" quiet="true" />
    </target>

    <!-- Static analysis -->
    <target name="analyse" description="Run static checks and analysis">
        <phingcall target="lint" />
        <phingcall target="metrics" />
    </target>

    <target name="lint" description="Check for syntax errors">
        <phingcall target="lint:php" />
        <phingcall target="lint:twig" />
        <phingcall target="lint:yaml" />
    </target>

    <target name="lint:php" description="Check for PHP syntax errors">
        <phplint>
            <fileset dir="${project.basedir}/src">
                <include name="**/*.php" />
            </fileset>
        </phplint>
    </target>

    <target name="lint:twig" description="Check for Twig syntax errors">
        <exec
            executable="${project.basedir}/app/console"
            checkreturn="true"
            passthru="true"
        >
            <arg value="lint:twig" />
            <arg value="${project.basedir}/app" />
        </exec>
        <exec
            executable="${project.basedir}/app/console"
            checkreturn="true"
            passthru="true"
        >
            <arg value="lint:twig" />
            <arg value="${project.basedir}/src" />
        </exec>
    </target>

    <target name="lint:yaml" description="Check for Yaml syntax errors">
        <exec
            executable="${project.basedir}/app/console"
            checkreturn="true"
            passthru="true"
        >
            <arg value="lint:yaml" />
            <arg value="${project.basedir}/app" />
        </exec>
        <exec
            executable="${project.basedir}/app/console"
            checkreturn="true"
            passthru="true"
        >
            <arg value="lint:yaml" />
            <arg value="${project.basedir}/src" />
        </exec>
    </target>

    <target name="metrics" description="Run static code analysis" depends="sonarqube:status, test">
        <exec
            command="sonar-runner"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <!-- Test task -->
    <target name="test" description="Run tests" depends="clean:test">
        <phingcall target="test:unit" />
    </target>

    <target name="test:unit" description="Run unit tests" depends="clean:test">
        <exec
            executable="${project.basedir}/bin/phpunit"
            checkreturn="true"
            passthru="true"
        >
            <arg value="-c" />
            <arg value="${project.basedir}/app/phpunit.xml.dist" />
        </exec>
    </target>

    <target name="test:uuid" description="Test UUID generation">
        <exec
            executable="${project.basedir}/bin/phpunit"
            checkreturn="true"
            passthru="true"
        >
            <arg value="-c" />
            <arg value="${project.basedir}/app/phpunit.xml.dist" />
            <arg value="--group" />
            <arg value="uuid-big" />
        </exec>
    </target>

    <!-- Run task -->
    <target name="run" description="Run the app">
        <exec
            command="${project.basedir}/app/console server:run ${app.local.host}:${app.local.port}"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <!-- Run distributed app -->
    <target name="run:dist" description="Run the distribution-version of the app" depends="services:start">
        <exec command="docker ps -aq --filter=&quot;name=${container.app.name}&quot;" outputProperty="app.container.id" />
        <if>
            <not>
                <equals arg1="${app.container.id}" arg2="" />
            </not>
            <then>
                <exec
                    command="docker rm -f ${app.container.id}"
                    checkreturn="true"
                    passthru="true"
                />
            </then>
        </if>
        <exec
            command="docker run -p ${container.app.port} --name=${container.app.name} -d ${container.app.image}"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <target name="stop:dist" description="Stop the distribution-version of the app">
        <exec command="docker ps -aq --filter=&quot;name=${container.app.name}&quot;" outputProperty="app.container.id" />
        <if>
            <not>
                <equals arg1="${app.container.id}" arg2="" />
            </not>
            <then>
                <exec
                    command="docker stop ${app.container.id}"
                    checkreturn="true"
                    passthru="true"
                />
            </then>
        </if>
    </target>

    <!-- Utilities tasks -->
    <target name="sonarqube:start" description="Start SonarQube service">
        <exec command="docker ps -aq --filter=&quot;name=${container.sonarqube.name}&quot;" outputProperty="sonarqube.container.id" />
        <if>
            <equals arg1="${sonarqube.container.id}" arg2="" />
            <then>
                <exec
                    command="docker run --name ${container.sonarqube.name} -p 9000:9000 -p 9092:9092 -d ${container.sonarqube.image}"
                    checkreturn="true"
                    passthru="true"
                />
            </then>
            <else>
                <exec
                    command="docker start ${container.sonarqube.name}"
                    checkreturn="true"
                    passthru="true"
                />
            </else>
        </if>
    </target>

    <target name="sonarqube:status" description="Determines the status of the SonarQube service">
        <exec command="docker ps -q --filter=&quot;name=${container.sonarqube.name}&quot;" outputProperty="sonarqube.container.id" />
        <if>
            <equals arg1="${sonarqube.container.id}" arg2="" />
            <then>
                <fail message="The SonarQube service is not running. Run the &quot;sonarqube:start&quot; task." />
            </then>
            <else>
                <echo msg="SonarQube is up and running." />
            </else>
        </if>
    </target>

    <target name="sonarqube:stop" description="Stop SonarQube service">
        <exec
            command="docker stop ${container.sonarqube.name}"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <!-- Depending services -->
    <target name="services:start" description="Starts depending services">
        <phingcall target="mongodb:start" />
        <phingcall target="elasticsearch:start" />
    </target>

    <target name="services:stop" description="Stop depending services">
        <phingcall target="mongodb:stop" />
        <phingcall target="elasticsearch:stop" />
    </target>

    <target name="mongodb:start" description="Start MongoDB service">
        <exec command="docker ps -aq --filter=&quot;name=${container.events.name}&quot;" outputProperty="mongodb.container.id" />
        <if>
            <equals arg1="${mongodb.container.id}" arg2="" />
            <then>
                <exec
                    command="docker run --name ${container.events.name} -v ${container.events.volume} -p ${container.events.port} -d ${container.events.image}"
                    checkreturn="true"
                    passthru="true"
                />
            </then>
            <else>
                <exec
                    command="docker start ${container.events.name}"
                    checkreturn="true"
                    passthru="true"
                />
            </else>
        </if>
    </target>

    <target name="mongodb:stop" description="Stop MongoDB service">
        <exec
            command="docker stop ${container.events.name}"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <target name="elasticsearch:start" description="Start ElasticSearch service">
        <exec command="docker ps -aq --filter=&quot;name=${container.index.name}&quot;" outputProperty="elasticsearch.container.id" />
        <if>
            <equals arg1="${elasticsearch.container.id}" arg2="" />
            <then>
                <exec
                    command="docker run --name ${container.index.name} -v ${container.index.volume} -p ${container.index.port} -d ${container.index.image}"
                    checkreturn="true"
                    passthru="true"
                />
            </then>
            <else>
                <exec
                    command="docker start ${container.index.name}"
                    checkreturn="true"
                    passthru="true"
                />
            </else>
        </if>
    </target>

    <target name="elasticsearch:stop" description="Stop ElasticSearch service">
        <exec
            command="docker stop ${container.index.name}"
            checkreturn="true"
            passthru="true"
        />
    </target>
</project>
