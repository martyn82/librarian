<?xml version="1.0" encoding="UTF-8"?>
<project name="Librarian" default="test">
    <property file="${project.basedir}/build.properties" />

    <!--
    <target name="clean">
        <delete dir="${project.basedir}/build" quiet="true" />
        <mkdir dir="${project.basedir}/build" />
    </target>

    <target name="buid" depends="clean"></target>
    -->

    <target name="clean:test" description="Clean test reports">
        <delete dir="${project.basedir}/report/test" quiet="true" />
    </target>

    <target name="static" description="Run static checks and analysis">
        <phingcall target="lint" />
        <phingcall target="analyse" />
    </target>

    <target name="lint" description="Check for syntax errors">
        <phingcall target="lint:php" />
        <phingcall target="lint:twig" />
        <phingcall target="lint:yaml" />
    </target>

    <target name="lint:php" description="Check for PHP syntax errors">
        <phplint>
            <fileset dir="${project.basedir}/src">
                <include name="**/*.php" />
            </fileset>
        </phplint>
    </target>

    <target name="lint:twig" description="Check for Twig syntax errors">
        <exec
            executable="${project.basedir}/app/console"
            checkreturn="true"
            passthru="true"
        >
            <arg value="lint:twig" />
            <arg value="${project.basedir}/app" />
        </exec>
        <exec
            executable="${project.basedir}/app/console"
            checkreturn="true"
            passthru="true"
        >
            <arg value="lint:twig" />
            <arg value="${project.basedir}/src" />
        </exec>
    </target>

    <target name="lint:yaml" description="Check for Yaml syntax errors">
        <exec
            executable="${project.basedir}/app/console"
            checkreturn="true"
            passthru="true"
        >
            <arg value="lint:yaml" />
            <arg value="${project.basedir}/app" />
        </exec>
        <exec
            executable="${project.basedir}/app/console"
            checkreturn="true"
            passthru="true"
        >
            <arg value="lint:yaml" />
            <arg value="${project.basedir}/src" />
        </exec>
    </target>

    <target name="analyse" description="Run static code analysis" depends="sonarqube:status, test">
        <exec
            command="sonar-runner"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <target name="test" description="Run Unit Tests" depends="clean:test">
        <exec
            executable="${project.basedir}/bin/phpunit"
            checkreturn="true"
            passthru="true"
        >
            <arg value="-c" />
            <arg value="${project.basedir}/app/phpunit.xml.dist" />
        </exec>
    </target>

    <target name="run" description="Run the app">
        <exec
            command="${project.basedir}/app/console server:run ${app.local.host}:${app.local.port}"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <target name="sonarqube:start" description="Start SonarQube service">
        <exec command="docker ps -aq --filter=&quot;name=${container.sonarqube.name}&quot;" outputProperty="sonarqube.container.id" />
        <if>
            <equals arg1="${sonarqube.container.id}" arg2="" />
            <then>
                <exec
                    command="docker run --name ${container.sonarqube.name} -p 9000:9000 -p 9092:9092 -d ${container.sonarqube.image}"
                    checkreturn="true"
                    passthru="true"
                />
            </then>
            <else>
                <exec
                    command="docker start ${container.sonarqube.name}"
                    checkreturn="true"
                    passthru="true"
                />
            </else>
        </if>
    </target>

    <target name="sonarqube:status" description="Determines the status of the SonarQube service">
        <exec command="docker ps -q --filter=&quot;name=${container.sonarqube.name}&quot;" outputProperty="sonarqube.container.id" />
        <if>
            <equals arg1="${sonarqube.container.id}" arg2="" />
            <then>
                <fail message="The SonarQube service is not running. Run the &quot;sonarqube:start&quot; task." />
            </then>
            <else>
                <echo msg="SonarQube is up and running." />
            </else>
        </if>
    </target>

    <target name="sonarqube:stop" description="Stop SonarQube service">
        <exec
            command="docker stop ${container.sonarqube.name}"
            checkreturn="true"
            passthru="true"
        />
    </target>

    <target name="mongodb:start" description="Start MongoDB service">
        <exec command="docker ps -aq --filter=&quot;name=${container.events.name}&quot;" outputProperty="mongodb.container.id" />
        <if>
            <equals arg1="${mongodb.container.id}" arg2="" />
            <then>
                <exec
                    command="docker run --name ${container.events.name} -v ${container.events.volume} -p ${container.events.port} -d ${container.events.image}"
                    checkreturn="true"
                    passthru="true"
                />
            </then>
            <else>
                <exec
                    command="docker start ${container.events.name}"
                    checkreturn="true"
                    passthru="true"
                />
            </else>
        </if>
    </target>

    <target name="mongodb:stop" description="Stop MongoDB service">
        <exec
            command="docker stop ${container.events.name}"
            checkreturn="true"
            passthru="true"
        />
    </target>
</project>
